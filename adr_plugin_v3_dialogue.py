# -*- coding: utf-8 -*-
"""
/***************************************************************************
 adr_pluginDialog
                                 A QGIS plugin
 Version 1 of ADR QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2025 William Ponczak
        email                : ponczawm@dukes.jmu.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsProject, QgsRasterBandStats
from qgis.PyQt import uic, QtWidgets, QtCore
from qgis.utils import iface
from PyQt5.QtCore import Qt


# Load the .ui file for the dialog
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'adr_plugin_v2_dialog_base.ui'))

class AdrPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    """
    A dialog for interacting with GIS layers, selecting bands, and adjusting normalization values.
    """
    def __init__(self, parent=None):
        """
        Initializes the plugin dialog, sets up UI elements, and prepares necessary data structures.
        """
        super(AdrPluginDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface

        self.soundLayer = None
        self.layer_list = QgsProject.instance().layerTreeRoot().children()

        # Initialize the data structures
        self.layer_hearable = {}
        self.band_hearable = {}
        self.normalization_vals = {}

        # Initialize layers and bands
        self.initialize_layers()

        # Populate the layer selection menu
        self.populate_layer_selection()

        # Set up button actions
        self.accept = self.button_box.accepted.connect(self.on_okay)
        self.reject = self.button_box.rejected.connect(self.on_cancel)
        self.update_scale = self.button_update_scale.released.connect(self.update_normalization_values)

        # Set up event listeners
        self.layer_selection.itemClicked.connect(self.clicked)
        self.comboBox_band.activated.connect(self.on_band_selection_changed)

    def initialize_layers(self):
        """
        Initializes the layer and band hearability status, and sets the normalization values for layers.
        """
        for layer in self.layer_list:
            layer = layer.layer()
            self.layer_hearable[layer.name()] = False
            self.band_hearable[layer.name()] = [False] * layer.bandCount()
            self.normalization_vals[layer.name()] = {}

            # Initialize band normalization values
            for band_number in range(1, layer.bandCount() + 1):
                stats = layer.dataProvider().bandStatistics(band_number, QgsRasterBandStats.All)
                self.normalization_vals[layer.name()][layer.bandName(band_number)] = [stats.minimumValue, stats.maximumValue]

    def populate_layer_selection(self):
        """
        Populates the layer selection list with all layers in the current QGIS project.
        """
        self.layer_selection.addItems([layer.name() for layer in self.layer_list])
        self.setup_layer_checkboxes()

    def setup_layer_checkboxes(self):
        """
        Sets up checkboxes for layer selection.
        """
        for row in range(self.layer_selection.count()):
            item = self.layer_selection.item(row)
            item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
            item.setCheckState(QtCore.Qt.Unchecked)

    def update_hearability(self, selection, target_dict):
        """
        Updates the hearability status (checked or unchecked) for the given selection of items.
        """
        for row in range(selection.count()):
            item = selection.item(row)
            target_dict[self.layer_list[row].layer().name()] = (item.checkState() == 2)

    def clicked(self, item):
        """
        Handles layer selection events. Updates the sound layer and corresponding band selection.
        """
        print(f"Layer clicked: {item.text()}")
        self.user_choice = item.text()
        self.layer_hearable[self.user_choice] = True
        self.update_sound_layer()
        self.update_band_selection()

    def update_sound_layer(self):
        """
        Updates the sound layer based on the user selection.
        """
        for layer in self.layer_list:
            if layer.name() == self.user_choice:
                self.soundLayer = layer
                break

    def update_band_selection(self):
        """
        Updates the available bands in the band selection list based on the selected layer.
        """
        self.band_selection.clear()
        if self.layer_hearable.get(self.soundLayer.name(), False):
            band_names = [self.soundLayer.layer().bandName(q) for q in range(1, self.soundLayer.layer().bandCount() + 1)]
            self.band_selection.addItems(band_names)
            self.comboBox_band.addItems(band_names)
            self.setup_band_checkboxes()

    def setup_band_checkboxes(self):
        """
        Sets up checkboxes for the band selection menu.
        """
        for row in range(self.band_selection.count()):
            item = self.band_selection.item(row)
            item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
            item.setCheckState(QtCore.Qt.Unchecked)

    def clear_band_selection(self):
        """
        Clears the current band selection.
        """
        self.band_selection.clear()

    def update_normalization_values(self):
        """
        Updates the normalization values for the selected band.
        """
        try:
            min_value = float(self.lineEdit_normalize_min.text())
            max_value = float(self.lineEdit_normalize_max.text())
            self.normalization_vals[self.soundLayer.name()][self.comboBox_band.currentText()] = [min_value, max_value]
            print("Updated normalization ranges:", self.normalization_vals)
        except ValueError:
            print("Invalid input for normalization range. Please enter valid numbers.")

    def on_band_selection_changed(self):
        """
        Updates the normalization text fields when a band is selected from the dropdown.
        """
        band_name = self.comboBox_band.currentText()
        if band_name:
            self.update_normalization_fields(band_name)

    def update_normalization_fields(self, band_name):
        """
        Updates the minimum and maximum normalization fields based on the selected band.
        """
        min_val, max_val = self.normalization_vals[self.soundLayer.name()].get(band_name, (None, None))
        if min_val is not None and max_val is not None:
            self.lineEdit_normalize_min.setText(str(min_val))
            self.lineEdit_normalize_max.setText(str(max_val))

    def on_okay(self):
        """
        Handles the action when the 'Okay' button is pressed.
        Updates the hearability of layers and bands based on current selections.
        """
        self.update_hearability(self.layer_selection, self.layer_hearable)
        layer_name = self.soundLayer.name()
        for i in range(self.band_selection.count()):
            item = self.band_selection.item(i)
            self.band_hearable[layer_name][i] = (item.checkState() == 2)

    def on_cancel(self):
        """
        Handles the action when the 'Cancel' button is pressed. Closes the dialog.
        """
        self.close()

    def get_all_inputs(self):
        """
        Returns all relevant input values collected from the dialog window.
        """
        return self.normalization_vals, self.layer_hearable, self.band_hearable
